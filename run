#!/usr/bin/env bash

set -eu

image_name="nre-station-feed-parser"

function build {
  local php_version"=${PHP_VERSION:-7.4}"

  # Build the Docker image.
  docker image build . \
    --build-arg PHP_VERSION=$php_version \
    -f tools/docker/Dockerfile \
    -t $image_name \
    "${@}"
}

function ci:test {
  # Run continuous integration (CI) checks.
  lint:dockerfile

  local php_versions=(
    "8.0"
    "8.1"
  )

  for php_version in "${php_versions[@]}"; do
    PHP_VERSION="${php_version}" build --target=dev
    cmd php -v

    coding-standards --dry-run
    static-analysis
    test

    composer:update:lowest
    static-analysis
    test
  done
}

function cmd {
  local entrypoint="$1"
  shift 1

  docker container run --rm -t \
    --entrypoint ${entrypoint} \
    $image_name \
    "${@}"
}

function composer {
  # Run Composer commands.
  cmd composer "${@}"
}

function composer:update:lowest {
  # Install the lowest compatible dependencies.
  composer update --prefer-lowest
}

function coding-standards {
  # Run coding standards checks.
  cmd php-cs-fixer fix src --diff "${@}"
}

function help {
  printf "%s <task> [args]\n\nTasks:\n" "${0}"

  compgen -A function | grep -v "^_" | cat -n

  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

function lint:dockerfile {
  # Lint Dockerfile with hadolint
  docker container run --rm -i \
    hadolint/hadolint hadolint \
      --ignore DL3008 \
      --ignore DL3022 "${@}" \
      - < tools/docker/Dockerfile
}

function shell {
  # Start a new bash session within the container.
  docker container run --rm -i -t \
    --entrypoint bash \
    $image_name \
    "${@}"
}

function static-analysis {
  # Run static analysis checks.
  cmd phpstan "${@}"
}

function test {
  # Run automated tests.
  cmd pest "${@}"
}

TIMEFORMAT="Task completed in %3lR"
time "${@:-help}"
